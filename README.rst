PSF Utilities - Read Spectre Data Files
=======================================

.. image:: https://img.shields.io/pypi/v/psf_utils.svg
    :target: https://pypi.python.org/pypi/psf_utils

.. image:: https://img.shields.io/pypi/pyversions/psf_utils.svg
    :target: https://pypi.python.org/pypi/psf_utils/

:Author: Ken Kundert
:Version: 0.5.0
:Released: 2020-01-08


What?
-----

*psf_utils* is a library allows you to read data from a Spectre PSF ASCII file.
Spectre is a commercial circuit simulator produced by Cadence Design Systems.
PSF files contain signals generated by Spectre.  This package also contains two
programs that are useful in their own right, but also act as demonstrators as to
how to use the library. They are *list-psf* and *plot-psf*.  The first lists the
available signals in a file, and the other displays them.


Accessing the Results
---------------------

You can use the PSF class to read ASCII Parameter Storage Format files. When
instantiating the class you pass in the path to the file and then the resulting
PSF object contains a dictionary that containing the signals. For example, the
following lists is a::

    from psf_utils import PSF
    from inform import Error, display

    kinds = {
        'float double': 'real',
        'float complex': 'complex',
    }

    try:
        psf = PSF('adc.raw/tran.tran')

        for signal in psf.all_signals():
            kind = signal.type.kind
            kind = kinds.get(kind, kind)
            display(f'{signal.name:<15}  {signal.units:<12}  {kind}')
    except Error as e:
        e.terminate()

This example plots the output signal::

    from psf_utils import PSF
    from inform import Error, display
    import matplotlib.pyplot as plt

    try:
        psf = PSF('adc.raw/tran.tran')
        sweep = psf.get_sweep()
        out = psf.get_signal('out')

        figure = plt.figure()
        axes = figure.add_subplot(1,1,1)
        axes.plot(sweep.abscissa, out.ordinate, linewidth=2, label=out.name)
        axes.set_title('ADC Output')
        axes.set_xlabel(f'{sweep.name} ({PSF.units_to_unicode(sweep.units)})')
        axes.set_ylabel(f'{out.name} ({PSF.units_to_unicode(out.units)})')
        plt.show()
    except Error as e:
        e.terminate()

*abscissa* and *ordinate* are NumPy arrays.


Utility Programs
----------------

Two utility programs are installed along with the *psf_utils* library:
*list-psf* and *plot-psf*. The first lists the signals available from a PSF
file, and the second displays them. They both employ caching to speed up access
to the data. They also cache the name of the PSF file so that it need not be
given every time. *plot-psf* also caches its arguments, so if you run it again
with no arguments it will simply repeat what it did last time. For example, here
is a typical session::

    # display signals in PSF file
    > list-psf -f resistor.raw/pnoise.pnoise
    Using pnoise.raw/pnoise.pnoise.
        R1:flicker  R1:total    R2:fn       out
        R1:thermal  R2:rn       R2:total

    # display them again, this time in long form
    > list-psf -l
    Using pnoise.raw/pnoise.pnoise.
        R1:flicker  A²/Hz  real  (12042 points)
        R1:thermal  A²/Hz  real  (12042 points)
        R1:total    A²/Hz  real  (12042 points)
        R2:fn       A²/Hz  real  (12042 points)
        R2:rn       A²/Hz  real  (12042 points)
        R2:total    A²/Hz  real  (12042 points)
        out         A/√Hz  real  (12042 points)

    # display only those that match R1:*
    > list-psf -l R1:*
    Using pnoise.raw/pnoise.pnoise.
        R1:flicker  A²/Hz  real  (12042 points)
        R1:thermal  A²/Hz  real  (12042 points)
        R1:total    A²/Hz  real  (12042 points)

    # display a graph containing signals that start with R1:
    > plot-psf R1:*

    # display the thermal noise of R1, and then the total noise minue the flicker noise
    > plot-psf R1:thermal R1:total-R1:flicker

    # display a graph containing only out
    > plot-psf out

    > plot-psf        # display out again


Converting to PSF ASCII
-----------------------

*psf_utils* only supports PSF ASCII files. As an alternative, `libpsf
<https://pypi.org/project/libpsf>`_ is a Python package that can read both ASCII
and binary PSF files. Or, you can use the Cadence *psf* program to convert
various types of simulation results files into PSF ASCII format. To use it,
simply specify the input and output files::

    > psf -i adc.raw/tran.tran -o adc.raw/tran.psfascii
    > list-psf -f adc.raw/tran.psfascii

In this example there is nothing special about the 'psfascii' suffix, it is
simply mnemonic.  Rather, the output is in ASCII format because the ``-b``
(binary) option is not specified.


Releases
--------

**Latest development release**:
    | Version: 0.5.0
    | Released: 2020-01-08

**0.4 (2019-09-26)**:
    - Allow glob patterns to be passed to both *list-psf* and *plot-psf*.

**0.3 (2019-09-25)**:
    - Fix import errors in *plot-psf* command.

**0.2 (2019-09-25)**:
    - Fix dependencies.

**0.1 (2019-09-25)**:
    - Initial version
